package com.hoaxify.ws.user;


import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.hoaxify.ws.error.ApiError;
import com.hoaxify.ws.shared.GenericResponse;

@RestController
public class UserController {
	
	@Autowired
	UserService userService;
	
	
	@PostMapping("/api/1.0/users")
//	@ResponseStatus(HttpStatus.CREATED)
	public GenericResponse createUser(@Valid @RequestBody User user) {
//		String username = user.getUsername();
//		String displayName = user.getDisplayName();
//		
////		ApiError error = new ApiError(400, "Validation Error", "/api/1.0/users");
//		Map<String, String> validationErrors = new HashMap<>();
//		
//		if(username == null || username.isEmpty()) {
//			validationErrors.put("username", "Username cannot be null");
//			error.setValidationErrors(validationErrors);
//		}
//		
//		if(displayName == null || displayName.isEmpty()) {
//			validationErrors.put("displayName", "displayname cannot be null");
//			error.setValidationErrors(validationErrors);
//		}
//		if(validationErrors.size()>0) {
//			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error); //.build vardÄ± api error yokken
//		}
		userService.save(user);
		return new GenericResponse("user created"); // alternatifi 
//		GenericResponse response = new GenericResponse("user created");
//		return response;
	}
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public ApiError handleValidationException(MethodArgumentNotValidException exception) {
		ApiError error = new ApiError(400, "Validation Error", "/api/1.0/users");
		Map<String, String> validationErrors = new HashMap<>();
		for(FieldError fieldError:exception.getBindingResult().getFieldErrors()) {
			validationErrors.put(fieldError.getField(),fieldError.getDefaultMessage());
		}
		error.setValidationErrors(validationErrors);
		return error;
	}	
}
